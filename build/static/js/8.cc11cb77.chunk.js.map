{"version":3,"sources":["Components/Login/login.js","Components/Auth/useAuth.js","Components/BankForm/BankForm.js"],"names":["Login","auth","useAuth","useState","currenUser","setCurrentUser","userNotFound","setUserNotFound","login","users","findlogedUser","userLoged","filter","user","isLogedU","length","useEffect","bgcolor","txtcolor","label","handle","data","email","index","indexOf","setTimeout","console","log","hideAmount","successButton","style","textAlign","useContext","AuthContext","BankForm","bgheader","show","setShow","status","setStatus","amount","setAmount","balance","setBalance","setUserLogged","name","setName","setEmail","password","setPassword","validateDataUser","field","getBalance","header","body","id","placeholder","value","onChange","e","currentTarget","type","isNaN","Number","target","alert","title","variant","color","disabled","buttonDisabled","onClick","className","to"],"mappings":"qMAIe,SAASA,IAGpB,IAAMC,EAAOC,cAHe,EAISC,mBAAS,IAJlB,mBAIrBC,EAJqB,KAITC,EAJS,OAKYF,oBAAS,GALrB,mBAKrBG,EALqB,KAKPC,EALO,OAMHL,cAAjBM,EANoB,EAMpBA,MAAOC,EANa,EAMbA,MAEf,SAASC,IACL,IAAIC,EAAYV,EAAKQ,MAAMG,QAAO,SAAAC,GAAI,OAAsB,IAAlBA,EAAKC,YAC3CH,EAAUI,OAAS,EACrBV,EAAeM,EAAU,IAEzBN,GAAe,GA0BrB,OArBAW,qBAAU,WACNN,MACC,CAACA,EAAeD,IAqBb,cAAC,WAAD,UAEGL,EAeC,cAAC,WAAD,IAdF,eAAC,WAAD,WACE,cAAC,IAAD,CACEa,QAAQ,QACRC,SAAS,QACTC,MAAM,QACNC,OA3Bd,SAAgBC,GAEZ,IAAIR,EAAOZ,EAAKQ,MAAMG,QAAO,SAAAC,GAAI,OAAIA,EAAKS,QAAUD,EAAKC,SACzD,GAAKT,EAAKE,OAAS,EAAE,CACrB,IAAIQ,EAAQtB,EAAKQ,MAAMe,QAAQX,EAAK,IAIpC,OAHAZ,EAAKQ,MAAMc,GAAOT,UAAW,EAC7BN,EAAMK,EAAK,IACXR,EAAeQ,IACR,EAEPN,GAAgB,GAChBkB,YAAW,WACPlB,GAAgB,KACjB,KAEHmB,QAAQC,IAAIvB,IAaFwB,YAAY,EACZC,cAAc,cAGhBvB,GACA,mBAAGwB,MAAO,CAACC,UAAW,UAAtB,oC,gCC3DhB,qDAIe,SAAS7B,IACpB,OAAO8B,qBAAWC,O,sICCP,SAASC,EAAT,GAA4E,IAAzDjB,EAAwD,EAAxDA,QAAQkB,EAAgD,EAAhDA,SAAShB,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,OAAOQ,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,cAEnE5B,EAAO+B,qBAAWC,KAFgE,EAIxD9B,oBAAS,GAJ+C,mBAIjFiC,EAJiF,KAI3EC,EAJ2E,OAKxDlC,mBAAS,IAL+C,mBAKjFmC,EALiF,KAKzEC,EALyE,OAMtDpC,mBAAS,IAN6C,mBAMjFqC,EANiF,KAMzEC,EANyE,OAO1DtC,mBAAS,IAPiD,mBAOjFuC,EAPiF,KAOxEC,EAPwE,OAQrDxC,mBAAS,IAR4C,mBAQjFQ,EARiF,KAQtEiC,EARsE,OAWxDzC,mBAAS,IAX+C,mBAWjF0C,EAXiF,KAW3EC,EAX2E,OAYxD3C,mBAAS,IAZ+C,mBAYjFmB,EAZiF,KAY1EyB,EAZ0E,OAaxD5C,mBAAS,IAb+C,mBAajF6C,EAbiF,KAavEC,EAbuE,KAkCxF,SAASC,EAAiBC,EAAOhC,GAC/B,OAAKgC,IAKS,aAAVhC,GAAwBgC,EAAMpC,OAAS,KACzCwB,EAAU,sCACVd,YAAW,kBAAMc,EAAU,MAAI,MACxB,IAPPA,EAAU,gBAAkBpB,GAC5BM,YAAW,kBAAMc,EAAU,MAAI,MACxB,GAXXvB,qBAAU,WACHY,GAZP,WACE,IAAIjB,EAAYV,EAAKQ,MAAMG,QAAO,SAAAC,GAAI,OAAsB,IAAlBA,EAAKC,YAC/CY,QAAQC,IAAIhB,GACRA,EAAUI,OAAS,GACrB4B,EAAWhC,EAAU,GAAG+B,SACxBE,GAAc,KAEdD,GAAW,GACXC,GAAc,IAKdQ,KAGD,CAAChB,IAoGJ,OACI,cAAC,IAAD,CACMnB,QAASA,EACTkB,SAAUA,EACVkB,OAAQlC,EACRmB,OAAQA,EACRgB,KAAMlB,EACF,eAAC,WAAD,WAEER,EACE,eAAC,WAAD,WACW,UAAVT,GACD,eAAC,WAAD,kBAEI,uBACA,cAAC,IAAD,CACE0B,KAAK,OACLU,GAAG,OACHC,YAAY,aACZC,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OAAIb,EAAQa,EAAEC,cAAcH,UACzC,0BAGF,uBAdF,SAeQ,uBACN,cAAC,IAAD,CACEZ,KAAK,QACLgB,KAAK,QACLN,GAAG,QACHC,YAAY,cACZC,MAAOnC,EACPoC,SAAU,SAAAC,GAAC,OAAIZ,EAASY,EAAEC,cAAcH,UAC1C,uBACA,uBAxBF,WAyBU,uBACR,cAAC,IAAD,CACEI,KAAK,WACLN,GAAG,WACHC,YAAY,iBACZC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAYU,EAAEC,cAAcH,UAC7C,0BAGJ,eAAC,WAAD,wBACa9C,EAAY+B,EAAU,KADnC,IACyC,uBACvC,uBACCvB,EAAQ,UACT,uBACE,uBACE0C,KAAK,QACLN,GAAG,SACHC,YAAa,eACbC,MAAOjB,EACPkB,SA9HD,SAACC,GAEfG,MAAMC,OAAOJ,EAAEK,OAAOP,QAGzBQ,MAAM,qCAFNxB,EAAUkB,EAAEK,OAAOP,UA4HH,0BAGN,uBACA,cAAC,IAAD,CACEI,KAAK,SACLN,GAAG,SACHW,MAAkB,aAAV/C,GAAkC,YAAVA,EAAwB,sBAAwB,iBAChFgD,QAAQ,YACRC,MAAM,UACNC,SAvHO,WACrB,GAAc,mBAAVlD,EACF,MAAc,KAAVG,GAA6B,KAAb0B,GAA4B,KAATH,EAMzC,GAAc,UAAV1B,EACF,MAAc,KAAVG,GAA6B,KAAb0B,EAOtB,GAAKpB,EA4BE,KAAIc,EAKT,OAAO,EAJP,GAAIA,GAAW,EACb,OAAO,MA9BM,CACf,GAAc,aAAVvB,EACF,OAAKuB,IAAY/B,IAGF,KAAX6B,GACa,IAAXA,GAQD,GAAc,YAAVrB,EACT,OAAKR,IAGU,KAAX6B,GACa,IAAXA,IAoFc8B,GACVC,QAxJhB,WACE,GAAI3C,EAAY,CACd,GAAc,UAAVT,IACG+B,EAAiBL,EAAU,QAAS,OAE3C,IAAKK,EAAiB5B,EAAU,SAAa,OAC7C,IAAK4B,EAAiBF,EAAU,YAAa,YAE7C,IAAKE,EAAiBV,EAAQ,UAAW,OAG3CpB,EADe,CAACyB,OAAKvB,QAAM0B,WAASR,WAEpCH,GAAQ,IAqII,SAQGlB,OAIH,eAAC,WAAD,WACE,cAAC,IAAD,CACE0C,KAAK,SACLM,QAAQ,YACRC,MAAM,UACNG,QA1IlB,WACEzB,EAAQ,IACRC,EAAS,IACTE,EAAY,IACZR,EAAU,IACVJ,GAAQ,IAiIM,SAKGR,IAEQ,mBAAVV,EAA6B,cAAC,IAAD,CAC5B0C,KAAK,SACLM,QAAQ,YACRD,MAAM,wBACNE,MAAM,YAJsB,SAK5B,cAAC,IAAD,CAAMI,UAAU,WAAWC,GAAG,SAA9B,qBACU","file":"static/js/8.cc11cb77.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport BankForm from '../BankForm/BankForm';\r\nimport useAuth from \"../Auth/useAuth\"\r\n\r\nexport default function Login() {\r\n    \r\n\r\n    const auth = useAuth();\r\n    const [currenUser, setCurrentUser] = useState('')\r\n    const [userNotFound, setUserNotFound] = useState(false)\r\n    const { login, users } = useAuth();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    function findlogedUser(){\r\n        let userLoged = auth.users.filter(user => user.isLogedU === true)\r\n        if (userLoged.length > 0) {\r\n          setCurrentUser(userLoged[0])\r\n        } else {\r\n          setCurrentUser(false)\r\n      }\r\n    \r\n      }\r\n\r\n    useEffect(() => {\r\n        findlogedUser()\r\n      }, [findlogedUser, users])\r\n  \r\n    function handle(data) {\r\n    \r\n        let user = auth.users.filter(user => user.email === data.email)\r\n        if ( user.length > 0){\r\n        let index = auth.users.indexOf(user[0])\r\n        auth.users[index].isLogedU = true\r\n        login(user[0])\r\n        setCurrentUser(user)\r\n        return true\r\n        } else {\r\n        setUserNotFound(true)\r\n        setTimeout(() =>{\r\n            setUserNotFound(false)\r\n        }, 2000)\r\n        }\r\n        console.log(currenUser)\r\n    }\r\n    return (\r\n      \r\n            <Fragment>\r\n            {\r\n              !currenUser ?\r\n              <Fragment>\r\n                <BankForm\r\n                  bgcolor=\"black\"\r\n                  txtcolor='white'\r\n                  label=\"Login\"\r\n                  handle={handle}\r\n                  hideAmount={true}\r\n                  successButton=\"Try Again\"\r\n                />\r\n              {\r\n                userNotFound &&\r\n                <p style={{textAlign: 'center'}}>Please register</p> \r\n              }\r\n              </Fragment>\r\n              : <Fragment></Fragment>\r\n            }\r\n            </Fragment>\r\n        \r\n    )\r\n    \r\n}\r\n","import { useContext } from \"react\";\r\nimport { AuthContext } from \"./AuthProvider\";\r\n\r\n\r\nexport default function useAuth() {\r\n    return useContext(AuthContext);\r\n}","import React, { Fragment, useState, useContext, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { AuthContext } from \"../Auth/AuthProvider\";\r\nimport { Link } from 'react-router-dom';\r\nimport {Card } from '../../context'\r\nexport default function BankForm({bgcolor,bgheader,label,handle,hideAmount,successButton}){\r\n\r\n  const auth = useContext(AuthContext);\r\n  \r\n  const [show, setShow]         = useState(true);\r\n  const [status, setStatus]     = useState('');\r\n  const [amount, setAmount]       = useState('');\r\n  const [balance, setBalance] = useState('');\r\n  const [userLoged, setUserLogged] = useState('');\r\n\r\n// UserData\r\n  const [name, setName]         = useState('');\r\n  const [email, setEmail]       = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n\r\n  function getBalance(){\r\n    let userLoged = auth.users.filter(user => user.isLogedU === true);\r\n    console.log(userLoged)\r\n    if (userLoged.length > 0) {\r\n      setBalance(userLoged[0].balance)\r\n      setUserLogged(true)\r\n    } else {\r\n      setBalance(false)\r\n      setUserLogged(false)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (!hideAmount) {\r\n      getBalance()\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [show])\r\n\r\n  function validateDataUser(field, label){\r\n    if (!field) {\r\n      setStatus('Please enter ' + label);\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false;\r\n    }\r\n    if (label === 'password' && field.length < 8) {\r\n      setStatus('Please enter at least 8 characters');\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n  function handleForm(){\r\n    if (hideAmount) {\r\n      if (label !== 'Login') {\r\n        if (!validateDataUser(name,     'name')) return;\r\n      }\r\n      if (!validateDataUser(email,    'email'))    return;\r\n      if (!validateDataUser(password, 'password')) return;\r\n    } else {\r\n      if (!validateDataUser(amount, 'amount')) return;\r\n    }\r\n    let dataUser = {name,email,password,amount}\r\n    handle(dataUser)\r\n    setShow(false);\r\n  }\r\n  const handleAmount = (e) => {\r\n    // console.log(e.target.value);\r\n    if (!isNaN(Number(e.target.value))) {\r\n      setAmount(e.target.value)\r\n    } else {\r\n      alert('Only positive amounts are allowed')\r\n    }\r\n  }\r\n  \r\n\r\n  function clean(){\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n    setAmount('');\r\n    setShow(true);\r\n  }\r\n  \r\n  const buttonDisabled = () => {\r\n    if (label === 'Create Account') {\r\n      if (email !== '' || password !== '' || name !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    if (label === 'Login') {\r\n      if (email !== '' || password !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    // buttonDisabled when there isn't user logged\r\n    if (!hideAmount) {\r\n      if (label === 'Withdraw') {\r\n        if (!balance || !userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      } else if (label === 'Deposit') {\r\n        if (!userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      }\r\n    } else if (balance) {\r\n      if (balance <= 0) {\r\n        return true\r\n      }\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  \r\n  return(\r\n      <Card\r\n            bgcolor={bgcolor}\r\n            bgheader={bgheader}\r\n            header={label}\r\n            status={status}\r\n            body={show ? (\r\n                <Fragment>\r\n                {\r\n                  hideAmount\r\n                  ? <Fragment>\r\n                    {label !== 'Login' &&\r\n                    <Fragment>\r\n                      Name\r\n                        <br />\r\n                        <TextField\r\n                          name='name'\r\n                          id=\"name\"\r\n                          placeholder=\"Enter name\"\r\n                          value={name}\r\n                          onChange={e => setName(e.currentTarget.value)} />\r\n                        <br />\r\n                    </Fragment>\r\n                      }\r\n                      <br />\r\n                      Email <br/>\r\n                      <TextField\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.currentTarget.value)}/>\r\n                      <br />\r\n                      <br />\r\n                      Password<br />\r\n                      <TextField\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.currentTarget.value)} />\r\n                      <br />\r\n                  </Fragment>\r\n                  :\r\n                  <Fragment>\r\n                    Balance: ${userLoged ? balance : null} <br/>\r\n                    <br />\r\n                    {label + ' Amount'}\r\n                    <br />\r\n                      <input\r\n                        type=\"input\"\r\n                        id=\"amount\"\r\n                        placeholder={'Enter Amount'}\r\n                        value={amount}\r\n                        onChange={handleAmount} />\r\n                      <br />\r\n                  </Fragment>\r\n                }\r\n                <br />\r\n                <Button\r\n                  type=\"submit\"\r\n                  id='submit'\r\n                  title={(label === 'Withdraw' || label === 'Deposit' ) ? 'Confirm transaction' : 'Click to Login'}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={buttonDisabled()}\r\n                  onClick={handleForm} >\r\n                  {label}\r\n                </Button>\r\n                </Fragment>\r\n              ):(\r\n                <Fragment>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={clean}>\r\n                    {successButton}\r\n                  </Button>\r\n                  {label === 'Create Account' ? <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    title='Click to go the Login'\r\n                    color=\"secundary\">\r\n                    <Link className=\"nav-link\" to=\"/login\">Login</Link>\r\n                  </Button> : null}\r\n                </Fragment>\r\n            \r\n            )}\r\n            />\r\n       \r\n\r\n  )\r\n}"],"sourceRoot":""}