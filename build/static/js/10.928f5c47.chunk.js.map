{"version":3,"sources":["Components/Deposit/deposit.js","Components/BankForm/BankForm.js"],"names":["Deposit","index","balance","auth","useContext","AuthContext","user","users","filter","isLogedU","length","indexOf","bgcolor","label","handle","data","Number","amount","alert","hideAmount","successButton","body","BankForm","bgheader","useState","show","setShow","status","setStatus","setAmount","setBalance","userLoged","setUserLogged","name","setName","email","setEmail","password","setPassword","validateDataUser","field","setTimeout","useEffect","console","log","getBalance","header","id","placeholder","value","onChange","e","currentTarget","type","isNaN","target","title","variant","color","disabled","buttonDisabled","onClick","className","to"],"mappings":"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","file":"static/js/10.928f5c47.chunk.js","sourcesContent":["import React, { useContext, /* useState, */ Fragment} from \"react\";\r\nimport { AuthContext } from \"../Auth/AuthProvider\";\r\nimport BankForm from \"../BankForm/BankForm\";\r\n\r\nexport default function Deposit(){\r\n  const auth = useContext(AuthContext);\r\n  /* const [success, setSuccess] = useState(true) */\r\n  \r\n  let user = auth.users.filter(user => user.isLogedU === true)\r\n  let index;\r\n  let balance;\r\n  if (user.length > 0) {\r\n    index = auth.users.indexOf(user[0])\r\n    balance = auth.users[index].balance\r\n  }\r\n  const handle = (data) => {\r\n    let user = auth.users.filter(user => user.isLogedU === true)\r\n    let index = auth.users.indexOf(user[0])\r\n    \r\n\r\n    if (Number(data.amount) >= 0) {\r\n      auth.users[index].balance += Number(data.amount)\r\n      alert(`Transaction done, your balance is $${auth.users[index].balance}`)\r\n      /* setSuccess(true) */\r\n    } else {\r\n      alert(\"You can't make operations with negative amounts\")\r\n      /* setSuccess(false) */\r\n      return false\r\n    }\r\n    return true\r\n    }\r\n\r\n    return (\r\n      <BankForm\r\n      bgcolor=\"success\"\r\n      label=\"Deposit\"\r\n      handle={handle}\r\n      hideAmount={false}\r\n      successButton=\"Make another deposit\"\r\n        body={\r\n          <Fragment>\r\n          <h3> Your balance is:</h3>\r\n          <div>${balance}</div>\r\n          </Fragment>\r\n        }\r\n    />\r\n    )\r\n  }","import React, { Fragment, useState, useContext, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { AuthContext } from \"../Auth/AuthProvider\";\r\nimport { Link } from 'react-router-dom';\r\nimport {Card } from '../../context'\r\nexport default function BankForm({bgcolor,bgheader,label,handle,hideAmount,successButton}){\r\n\r\n  const auth = useContext(AuthContext);\r\n  \r\n  const [show, setShow]         = useState(true);\r\n  const [status, setStatus]     = useState('');\r\n  const [amount, setAmount]       = useState('');\r\n  const [balance, setBalance] = useState('');\r\n  const [userLoged, setUserLogged] = useState('');\r\n\r\n// UserData\r\n  const [name, setName]         = useState('');\r\n  const [email, setEmail]       = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n\r\n  function getBalance(){\r\n    let userLoged = auth.users.filter(user => user.isLogedU === true);\r\n    console.log(userLoged)\r\n    if (userLoged.length > 0) {\r\n      setBalance(userLoged[0].balance)\r\n      setUserLogged(true)\r\n    } else {\r\n      setBalance(false)\r\n      setUserLogged(false)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (!hideAmount) {\r\n      getBalance()\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [show])\r\n\r\n  function validateDataUser(field, label){\r\n    if (!field) {\r\n      setStatus('Please enter ' + label);\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false;\r\n    }\r\n    if (label === 'password' && field.length < 8) {\r\n      setStatus('Please enter at least 8 characters');\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n  function handleForm(){\r\n    if (hideAmount) {\r\n      if (label !== 'Login') {\r\n        if (!validateDataUser(name,     'name')) return;\r\n      }\r\n      if (!validateDataUser(email,    'email'))    return;\r\n      if (!validateDataUser(password, 'password')) return;\r\n    } else {\r\n      if (!validateDataUser(amount, 'amount')) return;\r\n    }\r\n    let dataUser = {name,email,password,amount}\r\n    handle(dataUser)\r\n    setShow(false);\r\n  }\r\n  const handleAmount = (e) => {\r\n    // console.log(e.target.value);\r\n    if (!isNaN(Number(e.target.value))) {\r\n      setAmount(e.target.value)\r\n    } else {\r\n      alert('Only positive amounts are allowed')\r\n    }\r\n  }\r\n  \r\n\r\n  function clean(){\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n    setAmount('');\r\n    setShow(true);\r\n  }\r\n  \r\n  const buttonDisabled = () => {\r\n    if (label === 'Create Account') {\r\n      if (email !== '' || password !== '' || name !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    if (label === 'Login') {\r\n      if (email !== '' || password !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    // buttonDisabled when there isn't user logged\r\n    if (!hideAmount) {\r\n      if (label === 'Withdraw') {\r\n        if (!balance || !userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      } else if (label === 'Deposit') {\r\n        if (!userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      }\r\n    } else if (balance) {\r\n      if (balance <= 0) {\r\n        return true\r\n      }\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  \r\n  return(\r\n      <Card\r\n            bgcolor={bgcolor}\r\n            bgheader={bgheader}\r\n            header={label}\r\n            status={status}\r\n            body={show ? (\r\n                <Fragment>\r\n                {\r\n                  hideAmount\r\n                  ? <Fragment>\r\n                    {label !== 'Login' &&\r\n                    <Fragment>\r\n                      Name\r\n                        <br />\r\n                        <TextField\r\n                          name='name'\r\n                          id=\"name\"\r\n                          placeholder=\"Enter name\"\r\n                          value={name}\r\n                          onChange={e => setName(e.currentTarget.value)} />\r\n                        <br />\r\n                    </Fragment>\r\n                      }\r\n                      <br />\r\n                      Email <br/>\r\n                      <TextField\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.currentTarget.value)}/>\r\n                      <br />\r\n                      <br />\r\n                      Password<br />\r\n                      <TextField\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.currentTarget.value)} />\r\n                      <br />\r\n                  </Fragment>\r\n                  :\r\n                  <Fragment>\r\n                    Balance: ${userLoged ? balance : null} <br/>\r\n                    <br />\r\n                    {label + ' Amount'}\r\n                    <br />\r\n                      <input\r\n                        type=\"input\"\r\n                        id=\"amount\"\r\n                        placeholder={'Enter Amount'}\r\n                        value={amount}\r\n                        onChange={handleAmount} />\r\n                      <br />\r\n                  </Fragment>\r\n                }\r\n                <br />\r\n                <Button\r\n                  type=\"submit\"\r\n                  id='submit'\r\n                  title={(label === 'Withdraw' || label === 'Deposit' ) ? 'Confirm transaction' : 'Click to Login'}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={buttonDisabled()}\r\n                  onClick={handleForm} >\r\n                  {label}\r\n                </Button>\r\n                </Fragment>\r\n              ):(\r\n                <Fragment>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={clean}>\r\n                    {successButton}\r\n                  </Button>\r\n                  {label === 'Create Account' ? <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    title='Click to go the Login'\r\n                    color=\"secundary\">\r\n                    <Link className=\"nav-link\" to=\"/login\">Login</Link>\r\n                  </Button> : null}\r\n                </Fragment>\r\n            \r\n            )}\r\n            />\r\n       \r\n\r\n  )\r\n}"],"sourceRoot":""}