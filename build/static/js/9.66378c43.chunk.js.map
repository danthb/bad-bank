{"version":3,"sources":["Components/CreateAccount/createaccount.js","Components/BankForm/BankForm.js"],"names":["CreateAccount","auth","React","useContext","AuthContext","bgcolor","txtcolor","label","handle","newUser","users","push","name","email","password","balance","isLoged","console","log","hideAmount","successButton","BankForm","bgheader","useState","show","setShow","status","setStatus","amount","setAmount","setBalance","userLoged","setUserLogged","setName","setEmail","setPassword","validateDataUser","field","length","setTimeout","useEffect","filter","user","isLogedU","getBalance","header","body","id","placeholder","value","onChange","e","currentTarget","type","isNaN","Number","target","alert","title","variant","color","disabled","buttonDisabled","onClick","className","to"],"mappings":"4GAAA,0FAIe,SAASA,IAEpB,IAAMC,EAAOC,IAAMC,WAAWC,KAQ9B,OAEE,cAAC,IAAD,CACEC,QAAQ,QACRC,SAAS,QACTC,MAAM,iBACNC,OAZJ,SAAgBC,GAId,OAHAR,EAAKS,MAAMC,KAAK,CAACC,KAAMH,EAAQG,KAAMC,MAAOJ,EAAQI,MAAOC,SAAUL,EAAQK,SAAUC,QAAS,IAAKC,SAAS,IAE9GC,QAAQC,OACD,GASLC,YAAY,EACZC,cAAc,6B,sIChBP,SAASC,EAAT,GAA4E,IAAzDhB,EAAwD,EAAxDA,QAAQiB,EAAgD,EAAhDA,SAASf,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,OAAOW,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,cAEnEnB,EAAOE,qBAAWC,KAFgE,EAIxDmB,oBAAS,GAJ+C,mBAIjFC,EAJiF,KAI3EC,EAJ2E,OAKxDF,mBAAS,IAL+C,mBAKjFG,EALiF,KAKzEC,EALyE,OAMtDJ,mBAAS,IAN6C,mBAMjFK,EANiF,KAMzEC,EANyE,OAO1DN,mBAAS,IAPiD,mBAOjFR,EAPiF,KAOxEe,EAPwE,OAQrDP,mBAAS,IAR4C,mBAQjFQ,EARiF,KAQtEC,EARsE,OAWxDT,mBAAS,IAX+C,mBAWjFX,EAXiF,KAW3EqB,EAX2E,OAYxDV,mBAAS,IAZ+C,mBAYjFV,EAZiF,KAY1EqB,EAZ0E,OAaxDX,mBAAS,IAb+C,mBAajFT,EAbiF,KAavEqB,EAbuE,KAkCxF,SAASC,EAAiBC,EAAO9B,GAC/B,OAAK8B,IAKS,aAAV9B,GAAwB8B,EAAMC,OAAS,KACzCX,EAAU,sCACVY,YAAW,kBAAMZ,EAAU,MAAI,MACxB,IAPPA,EAAU,gBAAkBpB,GAC5BgC,YAAW,kBAAMZ,EAAU,MAAI,MACxB,GAXXa,qBAAU,WACHrB,GAZP,WACE,IAAIY,EAAY9B,EAAKS,MAAM+B,QAAO,SAAAC,GAAI,OAAsB,IAAlBA,EAAKC,YAC/C1B,QAAQC,IAAIa,GACRA,EAAUO,OAAS,GACrBR,EAAWC,EAAU,GAAGhB,SACxBiB,GAAc,KAEdF,GAAW,GACXE,GAAc,IAKdY,KAGD,CAACpB,IAoGJ,OACI,cAAC,IAAD,CACMnB,QAASA,EACTiB,SAAUA,EACVuB,OAAQtC,EACRmB,OAAQA,EACRoB,KAAMtB,EACF,eAAC,WAAD,WAEEL,EACE,eAAC,WAAD,WACW,UAAVZ,GACD,eAAC,WAAD,kBAEI,uBACA,cAAC,IAAD,CACEK,KAAK,OACLmC,GAAG,OACHC,YAAY,aACZC,MAAOrC,EACPsC,SAAU,SAAAC,GAAC,OAAIlB,EAAQkB,EAAEC,cAAcH,UACzC,0BAGF,uBAdF,SAeQ,uBACN,cAAC,IAAD,CACErC,KAAK,QACLyC,KAAK,QACLN,GAAG,QACHC,YAAY,cACZC,MAAOpC,EACPqC,SAAU,SAAAC,GAAC,OAAIjB,EAASiB,EAAEC,cAAcH,UAC1C,uBACA,uBAxBF,WAyBU,uBACR,cAAC,IAAD,CACEI,KAAK,WACLN,GAAG,WACHC,YAAY,iBACZC,MAAOnC,EACPoC,SAAU,SAAAC,GAAC,OAAIhB,EAAYgB,EAAEC,cAAcH,UAC7C,0BAGJ,eAAC,WAAD,wBACalB,EAAYhB,EAAU,KADnC,IACyC,uBACvC,uBACCR,EAAQ,UACT,uBACE,uBACE8C,KAAK,QACLN,GAAG,SACHC,YAAa,eACbC,MAAOrB,EACPsB,SA9HD,SAACC,GAEfG,MAAMC,OAAOJ,EAAEK,OAAOP,QAGzBQ,MAAM,qCAFN5B,EAAUsB,EAAEK,OAAOP,UA4HH,0BAGN,uBACA,cAAC,IAAD,CACEI,KAAK,SACLN,GAAG,SACHW,MAAkB,aAAVnD,GAAkC,YAAVA,EAAwB,sBAAwB,iBAChFoD,QAAQ,YACRC,MAAM,UACNC,SAvHO,WACrB,GAAc,mBAAVtD,EACF,MAAc,KAAVM,GAA6B,KAAbC,GAA4B,KAATF,EAMzC,GAAc,UAAVL,EACF,MAAc,KAAVM,GAA6B,KAAbC,EAOtB,GAAKK,EA4BE,KAAIJ,EAKT,OAAO,EAJP,GAAIA,GAAW,EACb,OAAO,MA9BM,CACf,GAAc,aAAVR,EACF,OAAKQ,IAAYgB,IAGF,KAAXH,GACa,IAAXA,GAQD,GAAc,YAAVrB,EACT,OAAKwB,IAGU,KAAXH,GACa,IAAXA,IAoFckC,GACVC,QAxJhB,WACE,GAAI5C,EAAY,CACd,GAAc,UAAVZ,IACG6B,EAAiBxB,EAAU,QAAS,OAE3C,IAAKwB,EAAiBvB,EAAU,SAAa,OAC7C,IAAKuB,EAAiBtB,EAAU,YAAa,YAE7C,IAAKsB,EAAiBR,EAAQ,UAAW,OAG3CpB,EADe,CAACI,OAAKC,QAAMC,WAASc,WAEpCH,GAAQ,IAqII,SAQGlB,OAIH,eAAC,WAAD,WACE,cAAC,IAAD,CACE8C,KAAK,SACLM,QAAQ,YACRC,MAAM,UACNG,QA1IlB,WACE9B,EAAQ,IACRC,EAAS,IACTC,EAAY,IACZN,EAAU,IACVJ,GAAQ,IAiIM,SAKGL,IAEQ,mBAAVb,EAA6B,cAAC,IAAD,CAC5B8C,KAAK,SACLM,QAAQ,YACRD,MAAM,wBACNE,MAAM,YAJsB,SAK5B,cAAC,IAAD,CAAMI,UAAU,WAAWC,GAAG,SAA9B,qBACU","file":"static/js/9.66378c43.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AuthContext } from \"../Auth/AuthProvider\";\r\nimport BankForm from \"../BankForm/BankForm\";\r\n\r\nexport default function CreateAccount() {\r\n\r\n    const auth = React.useContext(AuthContext);  \r\n\r\n    function handle(newUser){\r\n      auth.users.push({name: newUser.name, email: newUser.email, password: newUser.password, balance: 100, isLoged: false\r\n      })\r\n      console.log()\r\n      return true\r\n    }\r\n    return (\r\n\r\n      <BankForm\r\n        bgcolor=\"black\"\r\n        txtcolor='white'\r\n        label=\"Create Account\"\r\n        handle={handle}\r\n        hideAmount={true}\r\n        successButton=\"Create another account\"\r\n    />\r\n    )\r\n  }","import React, { Fragment, useState, useContext, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { AuthContext } from \"../Auth/AuthProvider\";\r\nimport { Link } from 'react-router-dom';\r\nimport {Card } from '../../context'\r\nexport default function BankForm({bgcolor,bgheader,label,handle,hideAmount,successButton}){\r\n\r\n  const auth = useContext(AuthContext);\r\n  \r\n  const [show, setShow]         = useState(true);\r\n  const [status, setStatus]     = useState('');\r\n  const [amount, setAmount]       = useState('');\r\n  const [balance, setBalance] = useState('');\r\n  const [userLoged, setUserLogged] = useState('');\r\n\r\n// UserData\r\n  const [name, setName]         = useState('');\r\n  const [email, setEmail]       = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n\r\n  function getBalance(){\r\n    let userLoged = auth.users.filter(user => user.isLogedU === true);\r\n    console.log(userLoged)\r\n    if (userLoged.length > 0) {\r\n      setBalance(userLoged[0].balance)\r\n      setUserLogged(true)\r\n    } else {\r\n      setBalance(false)\r\n      setUserLogged(false)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (!hideAmount) {\r\n      getBalance()\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [show])\r\n\r\n  function validateDataUser(field, label){\r\n    if (!field) {\r\n      setStatus('Please enter ' + label);\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false;\r\n    }\r\n    if (label === 'password' && field.length < 8) {\r\n      setStatus('Please enter at least 8 characters');\r\n      setTimeout(() => setStatus(''),3000);\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n  function handleForm(){\r\n    if (hideAmount) {\r\n      if (label !== 'Login') {\r\n        if (!validateDataUser(name,     'name')) return;\r\n      }\r\n      if (!validateDataUser(email,    'email'))    return;\r\n      if (!validateDataUser(password, 'password')) return;\r\n    } else {\r\n      if (!validateDataUser(amount, 'amount')) return;\r\n    }\r\n    let dataUser = {name,email,password,amount}\r\n    handle(dataUser)\r\n    setShow(false);\r\n  }\r\n  const handleAmount = (e) => {\r\n    // console.log(e.target.value);\r\n    if (!isNaN(Number(e.target.value))) {\r\n      setAmount(e.target.value)\r\n    } else {\r\n      alert('Only positive amounts are allowed')\r\n    }\r\n  }\r\n  \r\n\r\n  function clean(){\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n    setAmount('');\r\n    setShow(true);\r\n  }\r\n  \r\n  const buttonDisabled = () => {\r\n    if (label === 'Create Account') {\r\n      if (email !== '' || password !== '' || name !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    if (label === 'Login') {\r\n      if (email !== '' || password !== '') {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n    // buttonDisabled when there isn't user logged\r\n    if (!hideAmount) {\r\n      if (label === 'Withdraw') {\r\n        if (!balance || !userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      } else if (label === 'Deposit') {\r\n        if (!userLoged) {\r\n          return true\r\n        }\r\n        if (amount !== '') {\r\n          if (amount !== 0) {\r\n            return false\r\n          } else {\r\n            return true\r\n          }\r\n        } else {\r\n          return true\r\n        }\r\n      }\r\n    } else if (balance) {\r\n      if (balance <= 0) {\r\n        return true\r\n      }\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  \r\n  return(\r\n      <Card\r\n            bgcolor={bgcolor}\r\n            bgheader={bgheader}\r\n            header={label}\r\n            status={status}\r\n            body={show ? (\r\n                <Fragment>\r\n                {\r\n                  hideAmount\r\n                  ? <Fragment>\r\n                    {label !== 'Login' &&\r\n                    <Fragment>\r\n                      Name\r\n                        <br />\r\n                        <TextField\r\n                          name='name'\r\n                          id=\"name\"\r\n                          placeholder=\"Enter name\"\r\n                          value={name}\r\n                          onChange={e => setName(e.currentTarget.value)} />\r\n                        <br />\r\n                    </Fragment>\r\n                      }\r\n                      <br />\r\n                      Email <br/>\r\n                      <TextField\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"Enter email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.currentTarget.value)}/>\r\n                      <br />\r\n                      <br />\r\n                      Password<br />\r\n                      <TextField\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.currentTarget.value)} />\r\n                      <br />\r\n                  </Fragment>\r\n                  :\r\n                  <Fragment>\r\n                    Balance: ${userLoged ? balance : null} <br/>\r\n                    <br />\r\n                    {label + ' Amount'}\r\n                    <br />\r\n                      <input\r\n                        type=\"input\"\r\n                        id=\"amount\"\r\n                        placeholder={'Enter Amount'}\r\n                        value={amount}\r\n                        onChange={handleAmount} />\r\n                      <br />\r\n                  </Fragment>\r\n                }\r\n                <br />\r\n                <Button\r\n                  type=\"submit\"\r\n                  id='submit'\r\n                  title={(label === 'Withdraw' || label === 'Deposit' ) ? 'Confirm transaction' : 'Click to Login'}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  disabled={buttonDisabled()}\r\n                  onClick={handleForm} >\r\n                  {label}\r\n                </Button>\r\n                </Fragment>\r\n              ):(\r\n                <Fragment>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={clean}>\r\n                    {successButton}\r\n                  </Button>\r\n                  {label === 'Create Account' ? <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    title='Click to go the Login'\r\n                    color=\"secundary\">\r\n                    <Link className=\"nav-link\" to=\"/login\">Login</Link>\r\n                  </Button> : null}\r\n                </Fragment>\r\n            \r\n            )}\r\n            />\r\n       \r\n\r\n  )\r\n}"],"sourceRoot":""}